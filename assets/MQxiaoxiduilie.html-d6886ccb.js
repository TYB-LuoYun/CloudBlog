import{_ as e,o as a,c as i,e as t}from"./app-7534611f.js";const r="/assets/image-20231108093534150-93b737ad.png",c="/assets/image-20231108094315352-8c446401.png",s={},d=t('<h1 id="mq" tabindex="-1"><a class="header-anchor" href="#mq" aria-hidden="true">#</a> MQ</h1><h2 id="消息队列模式分类" tabindex="-1"><a class="header-anchor" href="#消息队列模式分类" aria-hidden="true">#</a> 消息队列模式分类</h2><h3 id="点对点" tabindex="-1"><a class="header-anchor" href="#点对点" aria-hidden="true">#</a> 点对点</h3><p>PTP点对点:使用queue作为通信载体</p><p>消息生产者生产消息发送到queue中，然后消息消费者从queue中取出并且消费消息。 Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。</p><p><img src="'+r+'" alt="image-20231108093534150"></p><h3 id="发布-订阅-广播broadcast" tabindex="-1"><a class="header-anchor" href="#发布-订阅-广播broadcast" aria-hidden="true">#</a> 发布/订阅（广播BROADCAST）</h3><p>Pub/Sub发布订阅（广播）：使用topic作为通信载体</p><p>消息生产者（发布）将消息发布到topic中(同一个topic的多个队列)，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到topic的消息会被所有订阅者消费。</p><p><img src="'+c+'" alt="image-20231108094315352"></p>',10),o=[d];function h(n,p){return a(),i("div",null,o)}const _=e(s,[["render",h],["__file","MQxiaoxiduilie.html.vue"]]);export{_ as default};
